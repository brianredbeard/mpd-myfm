#!/usr/bin/env python

#Import with statement from __future__ to support python 2.5
from __future__ import with_statement
import getopt
import htmlentitydefs
import mpd
import os
import random
import re
import socket
import sys
import time
import urllib
import traceback
import logging
import optparse
import pwd
import grp
import threading


def main(options, parser):

   [logger, logfile, console] = createlog(options)
   logger.debug('logging Level = %i' % (12 - options.verbosity))
   if options.pidfile:
      if os.path.exists(options.pidfile):
         try:
            pidfile = open(options.pidfile, 'rw')
            pid = pidfile.read(8)
            if os.path.exists('/proc/%s' % pid) and pid != '':
               logger.warning('The pidfile (%s) points to an existing process, mpd-myfm is probably already running.' % options.pidfile)
               if options.daemonize:
                  logger.warning('If you are sure mpd-myfm is not running you can remove %s and run mpd-myfm again.' % options.pidfile)
                  raise RuntimeError
               else:
                  logger.warning('Not using pidfile, since it is already in use by another process')
                  options.pidfile = ''
            else: 
               logger.warning('reusing stale pidfile (%s)' % options.pidfile)
               pidfile = open(options.pidfile,'w')
               pidfile.write(str(os.getpid()))
         except OSError, error:
            logger.error('An error ocured while creating the pidfile: %s' % error)
      else:
         pidfile = open(options.pidfile,'w')
         pidfile.write(str(os.getpid()))
         # We close pidfile handle later so the chown below doesn't fail.
   
   if options.effectivegroup and os.getuid() == 0:
      gid = grp.getgrnam(options.effectivegroup)[2]
      try: os.chown(options.pidfile, -1, gid)
      except OSError: logger.exception('Could not change group of %s.' % options.pidfile)
      try: os.setgid(gid)
      except OSError: 
         logger.exception('Could not set group to %s.' % options.effectivegroup)
         raise RuntimeError
   if options.effectiveuser and os.getuid() == 0:
      uid = pwd.getpwnam(options.effectiveuser)[2]
      try: os.chown(options.pidfile, uid, -1)
      except OSError: logger.exception('Could not change ownership of %s.' % options.pidfile)
      try: os.setuid(uid)
      except OSError: 
         logger.exception('Could not set user to %s.' % options.effectiveuser)
         raise RuntimeError
   pidfile.close()
   # Import local modules here so that any errors get logged to the log file.
   import lastfm

   client = mpd.MPDClient()
   if not connect(client, options.hostname, options.portnr, options.passwd):
      logger.error("Failed to connect to MPD server at `%s' on port `%i'" % (options.hostname, options.portnr))
      if not options.daemonize:
         parser.print_help()
         sys.exit(1)
      else:
         # If daemonized we should not exit on any connection failure.
         while not connect(client, options.hostname, options.portnr, options.passwd): sleep(10, logger)
   else:
      logger.info("Building the index of mpd's library")
      # Create an index from the user's library.
      index = LibraryIndex(client)
      # Start lirc thread if enabled.
      if options.lircenabled:
         irrec = lircstart(options, client, index, logger)
      # Get the user's loved & banned tracks from Last.fm?
      lovedtracks = []
      lovedartists = []
      bannedtracks = []
      if options.lastfmaccount:
         logger.info("Scraping last.fm for user's loved and banned tracks")
         for [artist, title] in lastfm.get_loved_tracks(options.lastfmaccount):
            lovedtracks.append(createkey(artist, title))
            if artist != 'Various Artists' and not artist in lovedartists:
               lovedartists.append(createkey(artist))
         for [artist, title] in lastfm.get_banned_tracks(options.lastfmaccount):
            bannedtracks.append(createkey(artist, title))

      logger.info("Done... Now starting main program loop.")
      if logfile:
         if options.loglevel == 1:
            logfile.setLevel(logging.INFO)
         elif options.loglevel == 2:
            logfile.setLevel(logging.DEBUG)
         elif options.loglevel >= 3:
            logfile.setLevel(12 - options.loglevel)
         else:
            logfile.setLevel(logging.WARNING)
      while 1:
         try:
            if irrec:
             irrec = lirccheck(irrec, client, options, logger)
            if clientenabled(client.status(), options.songsleft, logger):
               lasttrack = client.playlistinfo()[-1]
               similarartists_complex = [[a['similarity'], a['name']] for a in lastfm.get_similar_artists(lasttrack.get('artist', '').decode('utf-8'))]
               similarartists = []
               for artist in similarartists_complex:
                  similarartists.append([artist[0], simplifyname(artist[1])])
               similarartists = demoteplayedartists(client, options.repeatfactor, similarartists, logger)
               if not options.albummode or not addalbum(client, index, similarartists, logger):
                  addtrack(client, index, lasttrack, similarartists, options.repeatfactor, lovedtracks, lovedartists, bannedtracks, logger)
            # Sleep for a while before trying to update again.
            sleep(options.updatetime, logger)
         except (socket.error, mpd.ConnectionError), msgconerrer:
            # Let the user know what's going on.
            logger.error('Lost connection to mpd server? (%s)' % msgconerrer)
            # Try to close the connection in case it's still open.
            try: client.disconnect()
            except: pass
            # Sleep for a while before trying to reconnect.
            sleep(options.reconnecttime, logger)
            # Loop until we're connected to MPD again.
            while not connect(client, options.hostname, options.portnr, options.passwd): sleep(options.reconnecttime, logger)
         except (SystemExit, KeyboardInterrupt):
            if logfile:
               logfile.setLevel(logging.NOTSET)
            options.lircenabled = False
            if irrec:
               irrec.join()
            logger.info('mpd-myfm is stopping transmission.')
            sys.exit(0)
         except:
            # TODO: get track that caused crash in error log.
            logger.exception('mpd-myfm has encountered a problem and will now exit.')
            options.lircenabled = False
            if irrec:
               irrec.join()
            # We raise a RuntimeError here in stead of sys.exit() otherwise the
            # stack gets printed by both the logging module and by the standard
            # python stack tracer.
            # Be aware that since this stack gets printed from within the main()
            # function the main() call will be omitted in the stack trace.
            raise RuntimeError
            
def addtrack(client, index, lasttrack, similarartists, repeatfactor, lovedtracks, lovedartists, bannedtracks, logger): # {{{1
   similartracks = findsimilartracks(index, similarartists)
   similartracks = filterduplicates(client, repeatfactor, similartracks)
   removebannedtracks(bannedtracks, similartracks, logger)
   # TODO Make threshold configurable?
   if len(similartracks) <= 3 and lasttrack.get('genre', '') != '':
      logger.info("Adding track based on same genre `%s'." % lasttrack['genre'])
      for track in index.findtracksingenre(lasttrack['genre']):
         similartracks.append([1, track])
      similartracks = filterduplicates(client, repeatfactor, similartracks)
      removebannedtracks(bannedtracks, similartracks, logger)
   if len(similartracks) >= 1:
      marklovedtracks(similartracks, lovedtracks, lovedartists, logger)
      tracktoadd = weightedrandomchoice(similartracks)
      client.add(tracktoadd['file'])
      logger.info('Added %s by %s to play list.' % (tracktoadd.get('title', 'No Title tag'), tracktoadd.get('artist', 'No Artist tag')))
      logger.debug('From file "%s".' % tracktoadd['file'])
   else:
      logger.info('Failed to find similar track based on artist nor genre!')

def addalbum(client, index, similarartists, logger): # {{{1
   similaralbums = findsimilaralbums(index, similarartists)
   if len(similaralbums) <= 1:
      logger.info('Could not find any albums from similar artists, trying one lose track now.')
      logger.info('I will try an album again after that.')
      return False
   albumtoadd = weightedrandomchoice(similaralbums)
   trackstoload = index.findtracksinalbum(albumtoadd[0], albumtoadd[1])
   logger.info("Adding %i tracks in album `%s' by artist `%s'" % ( \
         len(trackstoload), albumtoadd[1], albumtoadd[0]))
   for track in trackstoload:
      client.add(track['file'])
   return True

def findsimilaralbums(index, similarartists): # {{{1
   """
   Return a list of albums in the Music Player Daemon library from any of the
   given artists. The numeric similarity associated with each artist is copied
   to all albums by that artist.
   """
   albums = []
   for [similarity, artistname] in similarartists:
      for albumname in index.findalbumsbyartist(artistname):
            albums.append([similarity, [artistname, albumname]])
   return albums

def filterduplicates(client, repeatfactor, tracks): # {{{1
   """
   Make sure a track is never repeated before a configurable number of other
   tracks (by default 20) has been played. The number of tracks can be set
   using the -s or --songs command-line argument.
   """
   trackstofilter = client.playlist()
   if len(trackstofilter) < repeatfactor:
      repeatfactor = len(trackstofilter)
   trackstofilter = trackstofilter[-repeatfactor : -1]
   return [t for t in tracks if not t[1]['file'] in trackstofilter]

def demoteplayedartists(client, repeatfactor, similarartists, logger): # {{{1
   """
   Make it less likely that a song from an artist who is already in the last
   'repeatfactor' songs. We do not ban them because that would make it very 
   hard to find similar songs after a while.
   """
   trackstofilter = client.playlistinfo()
   if len(trackstofilter) < repeatfactor:
      repeatfactor = len(trackstofilter)
   trackstofilter = trackstofilter[-repeatfactor : -1]
   artiststofilter = []
   for track in trackstofilter:
      artiststofilter.append(simplifyname(track.get('artist', '').decode('utf-8')))
   demotedlist = []
   counter = 0
   for artist in similarartists:
      if artist[1] in artiststofilter:
         counter += 1
         artist[0] = artist[0] / 5
         demotedlist.append(artist)
      else:
         demotedlist.append(artist)
   if counter > 0:
      logger.debug('demoted %i artists because they have recently been played.' % counter)
   return demotedlist

def clientenabled(status, songsleft, logger): # {{{1
   if int(status['playlistlength']) == 0:
      logger.log(7, "Doing nothing because play list is empty.")
      return False
   if int(status['random']) != 0:
      logger.log(7, "Doing nothing because random is enabled.")
      return False
   if int(status['repeat']) != 0:
      logger.log(7, "Doing nothing because repeat is enabled.")
      return False
   if status.has_key('song') and int(status['playlistlength']) > (int(status['song']) + songsleft) \
         or not status.has_key('song') and int(status['playlistlength']) >= songsleft:
      logger.log(7, "Doing nothing because the end of the play list hasn't been reached.")
      return False
   return True

def findsimilartracks(index, similarartists): # {{{1
   """
   Return a list of tracks in the Music Player Daemon library from any of the
   given artists. The numeric similarity associated with each artist is copied
   to all tracks by that artist.
   """
   tracks = []
   for [similarity, artistname] in similarartists:
      for track in index.findtracksbyartist(artistname):
         tracks.append([similarity, track])
   return tracks

def marklovedtracks(similartracks, lovedtracks, lovedartists, logger): # {{{1
   """
   Go through the similar tracks and increase the weights of favorite tracks
   and artists.
   """
   nlovedtracks = 0
   nlovedartists = 0
   for record in similartracks:
      similarity, track = record
      if track.get('artist', '') != '' and track.get('title', '') != '' and \
            createkey(track['artist'], track['title']) in lovedtracks:
         record[0] += 25
         nlovedtracks += 1
      elif track.get('artist', '') != '' and \
            createkey(track['artist']) in lovedartists:
         record[0] += 10
         nlovedartists += 1
   if nlovedtracks > 0:
      logger.debug('Marked %i loved tracks from Last.fm' % nlovedtracks) 
   if nlovedartists > 0:
      logger.debug('Marked %i tracks by loved artists from Last.fm' % nlovedtracks)

def removebannedtracks(bannedtracks, similartracks, logger): # {{{1
   """
   Go through the similar tracks and remove all banned tracks.
   """
   nbannedtracks = 0
   index = 0
   while index < len(similartracks):
      weight, track = similartracks[index]
      if track.get('artist', '') != '' and track.get('title', '') != '' and \
            createkey(track['artist'], track['title']) in bannedtracks:
         del similartracks[index]
         nbannedtracks += 1
      else:
         index += 1
   if nbannedtracks > 0:
      logger.debug('Ignored %i banned track(s) from Last.fm' % nbannedtracks)

# Lirc support. {{{1

class IRRec(threading.Thread): # {{{2
   """Threading class for polling lircd, it will set a class instance of 'keypressed'."""
   keypressed = []
   def __init__(self, client, options, index, logger):
      threading.Thread.__init__(self)
      self.client = client
      self.options = options
      self.index = index
      self.logger = logger

   def run(self): # {{{3
      try:
         lirchandle = pylirc.init("mpd-myfm", options.lircrc, 0)
      except RuntimeError:
         self.logger.debug('Could not connect to lirc daemon, is it running?')
         options.lircenabled = False
         lirchandle = False
         sys.exit()
      try:
         if lirchandle:
            self.logger.info('lirc thread started.')
         time.sleep(2)
         while options.lircenabled:
            # we do a time.sleep() here so the polling is done on an interval
            # otherwise it will drain all cpu power for polling, 100ms seems to result in a decent responsiveness.
            time.sleep(0.1)
            code = ''
            s = pylirc.nextcode()
            if(s):
               for code in s:
                  if code == 'albummode':
                     if self.options.albummode: options.albummode = False
                     else: self.options.albummode = True
                     self.pushconfirmation()
                     self.logger.info('togled albummode to %s.' % options.albummode)
                  elif code == 'volumeup':
                     self.client.volume(1)
                  elif code == 'volumedown':
                     self.client.volume(-1)
                  elif code == 'pause':
                     self.client.pause()
                  elif code == 'stop':
                     self.client.stop()
                  elif code == 'play':
                     self.client.play()
                  elif code == 'next':
                     self.client.next()
                  elif code == 'prev':
                     self.client.previous()
                  elif code == 'updatedb':
                     self.pushconfirmation()
                     self.logger.info('Started updating the mpd library.')
                     i = self.client.update()
                     while 1:
                        try:
                           c = self.client.update()
                           if c > i:
                              self.logger.info('The mpd library has been updated')
                              self.index = LibraryIndex(self.client)
                              #TODO: Update our own index.
                              break
                        except mpd.CommandError:
                           sleep(1, self.logger)
                        
                     # TODO: Get notified when finished and reload library.
         else:
            self.exit()
      except (SystemExit, KeyboardInterrupt):
         self.exit()
      except:
         self.logger.exception('An error has ocured in the lirc thread, it is exiting now.')
         self.exit()

   def pushconfirmation(self): # {{{3
      if self.client.status().get('state') == 'play':
         self.client.pause()
         time.sleep(0.25)
         self.client.play()

   def exit(self): # {{{3
         self.logger.info('Stopping lirc thread.')
         pylirc.exit()
         sys.exit()

  
def lircstart(options, client, index, logger): # {{{2
   try:
      # Check if the pylirc module is available in namespace.
      if pylirc and os.path.exists(os.path.expanduser(options.lircrc)): 
         irrec = IRRec(client, options, index, logger)
         irrec.start()
      else :
         logger.warning('Could not find lircrc file: %s.' % options.lircrc )
         logger.info('Will continue without lirc support.')
         options.lircenabled = False
         irrec = False
   except NameError:
      logger.error('Could not load the pylirc module needed for lirc support.')
      logger.info('Will continue without lirc support.')
      options.lircenabled = False 
      irrec = False # Set irrec to false to avoid variable not set errors.
   return irrec

def lirccheck(irrec, client, options, logger): # {{{2
   if(options.lircenabled and irrec.isAlive() == 0):
      logger.warning('The lirc thread died, restarting it.')
      irrec = IRRec(options, client, logger)
      irrec.start()
   return irrec

# Miscellaneous functions. {{{1

def createkey(*args): # {{{2
   """
   Simplify a list of strings (one or more of artist name, album name, track
   title) into a single string using the simplifyname() function.
   """
   return '-'.join(map(simplifyname, args))

def simplifyname(string): # {{{2
   """
   Simplify artist names for fuzzy matching.
   """
   global _cachednames
   if _cachednames.has_key(string):
      return _cachednames[string]
   else:
      result = string.lower()
      result = re.sub('^the\s+', '', result)
      result = re.sub(',\s+the$', '', result)
      result = re.sub('[^a-z0-9 -]', '', result)
      result = re.sub('\s+', ' ', result)
      _cachednames[string] = result
      return result
 
_cachednames = {}

def simplecompare(left, right): # {{{2
   """
   Compare two strings using the simplifyname() function and return True when
   they are equal.
   """
   return simplifyname(left) == simplifyname(right)

def weightedrandomchoice(items): # {{{2
   """
   Pick a weighted random value from a list of lists, where each list contains
   a numeric weight followed by any type of associated value.
   """
   total = 0
   for item in items:
      total += item[0]
   threshold = random.uniform(0.6, 1) * total 
   items.sort()
   for item in items:
      threshold -= item[0]
      if threshold <= 0:
         return item[1]

def sleep(seconds, logger): # {{{2
   logger.log(5, 'Sleeping for %i seconds' % seconds)
   time.sleep(seconds)

def unique(list): # {{{2
    result = []
    for item in list:
        if item not in result:
            result.append(item)
    return result

def createlog(options): # {{{2
   if not options.logfile:
      logfile = False
   logger = logging.getLogger("mpd-myfm")
   logger.setLevel(2)
   if options.logfile:
      logfile = logging.FileHandler(options.logfile, mode='a', encoding='utf-8')
      logfile.setLevel(logging.NOTSET)
      logfile.setFormatter(logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s'))
      logger.addHandler(logfile)
   if not options.daemonize:
      console = logging.StreamHandler()
      if options.verbosity == 0:
         console.setLevel(logging.WARNING)
      if options.verbosity == 1:
         console.setLevel(logging.INFO)
      if options.verbosity == 2:
         console.setLevel(logging.DEBUG)
      if options.verbosity >= 3:
         console.setLevel(12 - options.verbosity)
      if options.verbosity >= 15:
         console.setLevel(logging.NOTSET)
      console.setFormatter(logging.Formatter('%(name)s: %(levelname)s %(message)s'))
      logger.addHandler(console)
   else: console = False
   logger.info('Started mpd-myfm client')
   return logger, logfile, console

def connect(client, hostname, portnr, passwd): # {{{2
   try:
      client.connect(host=hostname, port=portnr)
      if passwd: client.password(passwd)
      return True
   except socket.error:
      return False

def cleanup(options, logger): # {{{2
   try:
      if options.pidfile:
         os.remove(options.pidfile)
   except:
      if logger:
         logger.error('Could not remove pidfile: %s' % options.pidfile)

def getoptions(): # {{{2
   
   def setdefaults(): # {{{3
      # Define option defaults.
      defaults = { 
            'hostname': '127.0.0.1',
            'portnr': 6600,
            'passwd': '',
            'songsleft': 3,
            'updatetime': 5,
            'reconnecttime': 60,
            'repeatfactor': 20,
            'albummode': False,
            'logfile': '',
            'daemonize': False,
            'verbosity': 0,
            'loglevel': 0,
            'lastfmaccount': '',
            'pidfile': '',
            'lircrc': '~/.lircrc',
            'lircenabled': False,
            'userconfig': '~/.mpd-myfm',
            'configfile': '/etc/mpd-myfm.conf', 
            'modulepath': '/usr/local/lib/python%s/site-packages/mpd-myfm' % sys.version[:3],
            'effectiveuser': '',
            'effectivegroup': ''}
    
      return defaults

   def callback(option, opt_str, value, parshandle): # {{{3
      parseconfigfile(value, parser=parshandle)

   def parseconfigfile(configfile, defaults={}, parser=''): # {{{3
      if os.path.exists(configfile):
         handle = open(configfile, 'r')
         fileconfig = []
         fileconfig=(handle.read().split('\n'))
         handle.close()
         for line in fileconfig:
            if not re.match('^\s*(#.*)?$', line):
               line = re.sub('\s*', '', line)
               optkey, optarg = line.split('=')
               optkey = optkey.lower()
               if parser:
                  if optkey == 'hostname' or optkey == 'passwd' or optkey == 'lastfmaccount': 
                     setattr(parser.values, optkey, optarg)
                  elif re.match('[0-9]', optarg):
                     setattr(parser.values, optkey, int(optarg))
                  else:
                     setattr(parser.values, optkey, optarg)
               else:
                  if optkey == 'hostname' or optkey == 'passwd' or optkey == 'lastfmaccount': 
                     defaults[optkey]=optarg
                  elif re.match('[0-9]', optarg):
                     defaults[optkey]=int(optarg)
                  else:
                     defaults[optkey]=optarg
      return defaults 
   
   # }}}

   class MyFmHelpFormatter (optparse.HelpFormatter): # {{{3
      """Format help with underlined section headers.
      """
      
      try:
         rows, columns = os.popen('stty size 2> /dev/null', 'r').read().split()
      except:
         columns = 80
      finally:
         columns = int(columns) - 5
      
      def __init__(self,
                   indent_increment=2,
                   max_help_position=35,
                   width=columns,
                   short_first=1):
         optparse.HelpFormatter.__init__ (
                  self, indent_increment, max_help_position, width, short_first, )

      def format_usage(self, usage):
         return self.format_heading(optparse._("Usage:  %s" % usage ))

      def format_heading(self, heading):
         return "%s\n%s\n" % (heading, "=-"[self.level] * len(heading) )

      # }}}

   # Parse config files, first system wide then the userconfig to override options set in both.
   defaults = setdefaults()
   if os.path.exists('/etc/mpd-myfm.conf'):
      defaults = parseconfigfile('/etc/mpd-myfm.conf', defaults)
   if os.path.exists(os.path.expanduser(defaults['userconfig'])) and os.getuid() != 0:
      defaults = parseconfigfile(os.path.expanduser(defaults['userconfig']), defaults)

   # Parse command line, this will override the config file settings.
   # If a config file is set via the command line the options defined in that config file will
   # be inserted at that point in the command line overriding any options given earlier on the commandline
   # that also exist in the specified config file.
   parser = optparse.OptionParser(formatter=MyFmHelpFormatter())
   parser.add_option('-c', '--configfile', help='Specify which configuration file to use (best given as first option).', metavar='FILE', type='str', action='callback', callback=callback)
   parser.add_option('-H', '--host', dest='hostname', help='host name of Music Player Daemon', metavar='HOST', default=defaults['hostname'])
   parser.add_option('-p', '--port', dest='portnr', help='port number on which MPD is listening', metavar='PORT', type='int', default=defaults['portnr'])
   parser.add_option('-P', '--pass', dest='passwd', help='password for connecting with MPD', metavar='PASS', default=defaults['passwd'])
   parser.add_option('-r', '--reconnect', dest='reconnecttime', help='seconds before client tries to reconnect', metavar='SEC', type='int', default=defaults['reconnecttime'])
   parser.add_option('-u', '--update', dest='updatetime', help='seconds between updates to the playlist', metavar='SEC', type='int', default=defaults['updatetime'])
   parser.add_option('-s', '--songs', dest='songsleft', help='number of tracks before end of playlist to start adding songs', metavar='NUM', type='int', default=defaults['songsleft'])
   parser.add_option('-R', '--repeat', dest='repeatfactor', help='number of last played tracks not to repeat', metavar='NUM', type='int', default=defaults['repeatfactor'])
   parser.add_option('-l', '--lastfm', dest='lastfmaccount', help="play tracks loved by user on Last.fm more frequently and don't play banned tracks", metavar='USERNAME', default=defaults['lastfmaccount'])
   parser.add_option('-A', '--album', dest='albummode', help='add whole albums instead of just one track.', action='store_true', default=defaults['albummode'])
   parser.add_option('-L', '--logfile', dest='logfile', help='Copy script output to file.', metavar='FILE', default=defaults['logfile'])
   parser.add_option('-i', '--lirc', dest='lircenabled', help='Enable support for lirc remote controll', action='store_true', default=defaults['lircenabled'])
   parser.add_option('-I', '--lircrc', dest='lircrc', help='Lirc keymapping file to use.', metavar='FILE', default=defaults['lircrc'])
   parser.add_option('-M', '--modulepath', dest='modulepath', help='Directory where the modules that came with mpd-myfm are stored.', metavar='/PATH/TO/', default=defaults['modulepath'])
   parser.add_option('-D', '--daemonize', dest='daemonize', help='Detatch from consolle.', action='store_true', default=defaults['daemonize'])
   parser.add_option('-F', '--pidfile', dest='pidfile', help='process identifier file to use.', metavar='FILE', default=defaults['pidfile'])
   parser.add_option('--userid', dest='effectiveuser', help='Name of the useraccount to run as if daemonized.', metavar='USERNAME', default=defaults['effectiveuser'])
   parser.add_option('--groupid', dest='effectivegroup', help='Name of the group to run in if daemonized.', metavar='GROUPNAME', default=defaults['effectivegroup'])
   parser.add_option('-v', '--verbose', dest='verbosity', help='Make more noise', action='count', default=defaults['verbosity'])
   parser.add_option('--loglevel', dest='loglevel', help='Set the amount of messages that get loged in the logfile. (1-10)', type='int', metavar='NUM', default=defaults['loglevel'])
   (options, args) = parser.parse_args()
   
   return options, parser

class LibraryIndex: # {{{1

   def __init__(self, mpdclient): # {{{2
      self.__tracks_by_artists = {}
      self.__tracks_in_genres = {}
      self.__albums_by_artists  = {}
      self.__tracks_in_albums = {}
      for track in mpdclient.listallinfo():
         self.__addtoindex('artist', track, self.__tracks_by_artists)
         self.__addtoindex('genre', track, self.__tracks_in_genres)
         if track.get('artist', '') != '' and track.get('album', '') != '':
            artistkey = simplifyname(track['artist'])
            if not self.__albums_by_artists.has_key(artistkey):
               self.__albums_by_artists[artistkey] = []
            if track['album'] not in self.__albums_by_artists[artistkey]:
               self.__albums_by_artists[artistkey].append(track['album'])
            albumkey = createkey(track['artist'], track['album'])
            if not self.__tracks_in_albums.has_key(albumkey):
               self.__tracks_in_albums[albumkey] = []
            self.__tracks_in_albums[albumkey].append(track)

   def __addtoindex(self, field, track, index): # {{{2
      if field in track:
         values = track[field]
         # track['genre'] can be a list of genres..
         if type(values) != type([]): values = [values]
         # and it may contain duplicates?! :-\ 
         for value in unique(values):
            key = simplifyname(value)
            if key != '':
               if not index.has_key(key):
                  index[key] = []
               index[key].append(track)
   
   def findtracksbyartist(self, artistname): # {{{2
      artistkey = simplifyname(artistname)
      return self.__tracks_by_artists.get(artistkey, [])

   def findtracksingenre(self, genrename): # {{{2
      genrekey = simplifyname(genrename)
      return self.__tracks_in_genres.get(genrekey, [])

   def findalbumsbyartist(self, artistname): # {{{2
      artistkey = simplifyname(artistname)
      return self.__albums_by_artists.get(artistkey, [])

   def findtracksinalbum(self, artistname, albumname): # {{{2
      albumkey = createkey(artistname, albumname)
      tracks = self.__tracks_in_albums.get(albumkey, [])
      tracks.sort(self.__sortalbumtracks)
      return tracks

   def __sortalbumtracks(self, x, y):
      return cmp(self.__gettracknr(x), self.__gettracknr(y))

   def __gettracknr(self, track):
      if track.get('track', '') != '':
         match = re.match('^\d+', track['track'])
         return int(match.group())
      return 0

# }}}1

if __name__ == '__main__':
   options, parser = getoptions()
   sys.path.append(options.modulepath)
   # Import modules needed for optional functionality here.
   # This makes loading optional and errors won't stop us from running.
   # We check if loading was successful later when logging is available.
   try:
      if options.lircenabled:
         try: 
            import pylirc
         except ImportError, error:
            pass
      if options.daemonize:
         import daemon
         try:
            with daemon.DaemonContext():
               main(options, parser)
         except daemon.daemon.DaemonError, error:
            print 'Could not Daemonize:', error
            if options.verbosity >= 2: raise
            else : raise RuntimeError
      else:
         main(options, parser)
   except RuntimeError:
      cleanup(options, None)
      sys.exit(1)
   except (SystemExit, KeyboardInterrupt):
      cleanup(options, None)
      sys.exit(0)
   except ImportError, module:
      cleanup(options, None)
      print 'An error has occurred during the importing of modules: %s.' % module

# vim: et ts=3 sw=3 fdm=marker
